<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>队列 on WOTMCCR&#39;S BLOG</title>
    <link>http://localhost:1313/tags/%E9%98%9F%E5%88%97/</link>
    <description>Recent content in 队列 on WOTMCCR&#39;S BLOG</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 23 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E9%98%9F%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024-05-23刷题2</title>
      <link>http://localhost:1313/posts/leetcode13/</link>
      <pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/leetcode13/</guid>
      <description>2024-05-23 刷题2 Link to heading 二叉树层次遍历 Link to heading 思路 Link to heading 需要借用一个辅助数据结构即队列来实现，队列先进先出，符合一层一层遍历的逻辑，而用栈先进后出适合模拟深度优先遍历也就是递归的逻辑。 而这种层序遍历方式就是图论中的广度优先遍历 在出队列的时候，将出队列元素的左右孩子加入队列&#xA;初始化结果数组以及需要需要的队列 每一层，出队列，并且，将下一层的节点加入队列中 因为，每次都有下一层的元素入队列，所以，需要保存当前层的数量 当下一层全部为nullptr的时候，队列为空结束 实现 Link to heading 非递归&#xA;/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; levelOrder(TreeNode* root) { queue&amp;lt;TreeNode *&amp;gt; que; if(root !</description>
    </item>
    <item>
      <title>2024-05-17刷题</title>
      <link>http://localhost:1313/posts/leetcode9/</link>
      <pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/leetcode9/</guid>
      <description>2024-05-17 Link to heading 使用栈模拟队列 Link to heading 16:49&#xA;思路 Link to heading 使用两个栈，stkIN，stkOut 当入队列的时候，先入In栈 当出队列的时候，将in栈的所有元素都移到out栈中，然后，out栈pop&#xA;题解 Link to heading C++ Link to heading class MyQueue { public: stack&amp;lt;int&amp;gt; stIn; stack&amp;lt;int&amp;gt; stOut; MyQueue() { } void push(int x) { stIn.push(x); } int pop() { if(stOut.empty()){ while(!stIn.empty()){ stOut.push(stIn.top()); stIn.pop(); } } int result = stOut.top(); stOut.pop(); return result; } int peek() { int res = this-&amp;gt;pop(); stOut.push(res); return res; } bool empty() { return stIn.</description>
    </item>
    <item>
      <title>2024-05-21刷题</title>
      <link>http://localhost:1313/posts/leetcode11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/leetcode11/</guid>
      <description>2024-05-21 Link to heading 239.滑动窗口最大值 Link to heading 21:27&#xA;思路 Link to heading 使用一个双端队列实现一个，单调队列，保证，队列中的元素，从大到小排列， 当使用push的时候，从后往前移除所有小于该值的元素 当使用pop(value)的时候，如果，pop的值等于队列中front的值，则pop。 使用front返回最大值，也就是第一个元素。&#xA;每次窗口移动的时候， 调用que.pop(滑动窗口中移除元素的数值)，移除窗口左边的元素，如果是最大值，则会pop成功，不是最大值，也不在队列里，不用处理 que.push(滑动窗口添加元素的数值)，将新元素按又大到小放到队列里 然后que.front()就返回我们要的最大值。&#xA;复杂度 Link to heading 时间复杂度: O(n) 空间复杂度: O(k)&#xA;题解 Link to heading C++ Link to heading class Solution { //单调队列 private: class Myqueue{ public:p deque&amp;lt;int&amp;gt; que; //push进入队列,如果push的数值大于入口元素的数值，那么就将队列后端的数值弹出，直到push的数值小于等于队列入口元素的数值为止。 // 这样就保持了队列里的数值是单调从大到小的了。 void push(int value){ while(!que.empty() &amp;amp;&amp;amp; value &amp;gt; que.back()){ que.pop_back(); } que.push_back(value); } //pop(value)：如果窗口移除的元素value等于单调队列的出口元素，那么队列弹出元素，否则不用任何操作 void pop(int value){ while(!que.empty() &amp;amp;&amp;amp; que.front() == value){ que.</description>
    </item>
  </channel>
</rss>
