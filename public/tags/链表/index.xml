<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>链表 on WOTMCCR&#39;S BLOG</title>
    <link>http://localhost:1313/tags/%E9%93%BE%E8%A1%A8/</link>
    <description>Recent content in 链表 on WOTMCCR&#39;S BLOG</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 14 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E9%93%BE%E8%A1%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024-05-14刷题1</title>
      <link>http://localhost:1313/posts/leetcode4/</link>
      <pubDate>Tue, 14 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/leetcode4/</guid>
      <description>2024-05-14 Link to heading 24.两两交换链表中的节点 Link to heading 17:10 17:32 18:08&#xA;思路 Link to heading 因为交换两个链表节点需要已知需交换两节点前面的节点，所以，为了保证运算的统一性，循环更新，前面的头节点，循环条件为，头节点之后两个需交换的节点都不为空。 之后，将更新节点指针指向头节点的下一个，进行更新操作。&#xA;while(left-&amp;gt;next!=nullptr &amp;amp;&amp;amp; left-&amp;gt;next-&amp;gt;next!=nullptr) { right = left-&amp;gt;next; left-&amp;gt;next = right-&amp;gt;next; right-&amp;gt;next = right-&amp;gt;next-&amp;gt;next; left-&amp;gt;next-&amp;gt;next = right; left = left-&amp;gt;next-&amp;gt;next; } 复杂度 Link to heading 时间复杂度：O(n)，其中 n 是链表的节点数量。需要对每个节点进行更新指针的操作。 空间复杂度：O(1)。 注意⚠️ Link to heading 如果想要交换两个节点需要知道这两个节点的前一个节点&#xA;题解 Link to heading C++ Link to heading /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* swapPairs(ListNode* head) { ListNode *dummyhead = new ListNode(0,head); ListNode *left = dummyhead; ListNode *right = dummyhead; while(left-&amp;gt;next!</description>
    </item>
    <item>
      <title>2024-05-10刷题3</title>
      <link>http://localhost:1313/posts/leetcode3/</link>
      <pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/leetcode3/</guid>
      <description>2024-05-10 Link to heading 203.移除链表元素 Link to heading 思路 Link to heading 使用一个虚拟头节点，来简化操作的逻辑，将dummyhead指向头节点，然后，使用temp进行遍历，当temp的next的val为val时候，就将next指向next-&amp;gt;next 如果不等，则向后移动temp指针&#xA;复杂度 Link to heading 时间复杂度：O(n)，其中 n 是链表的长度。需要遍历链表一次。 空间复杂度：O(1)。 注意⚠️ Link to heading 也可能忘记了C++的创建类指针的操作&#xA;ListNode *dummyhead = new ListNode(0,head); 注意使用虚拟头节点，非常常见&#xA;ListNode *dummyhead = new ListNode(0,head); ListNode *temp = dummyhead; 题解 Link to heading C++ Link to heading class Solution { public: ListNode* removeElements(ListNode* head, int val) { ListNode *dummyhead = new ListNode(0,head); ListNode *temp = dummyhead; while(temp-&amp;gt;next !</description>
    </item>
  </channel>
</rss>
