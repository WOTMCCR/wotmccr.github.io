<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>二叉树 on WOTMCCR&#39;S BLOG</title>
    <link>http://localhost:1313/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
    <description>Recent content in 二叉树 on WOTMCCR&#39;S BLOG</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024-05-29刷题</title>
      <link>http://localhost:1313/posts/leetcode18/</link>
      <pubDate>Wed, 29 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/leetcode18/</guid>
      <description>2024-05-28刷题 Link to heading 530.二叉搜索树的最小绝对差 Link to heading 14:01&#xA;思路 Link to heading 因为是使用二叉搜索树，所以使用中序遍历就是从小到大遍历，当前节点与之前节点的值相减，如果，小于最小值则替换。&#xA;所以，递归函数的参数应该有当前节点与上一个节点，可以将最小值放在外面。&#xA;注意⚠️ Link to heading prev 节点的确定 prev必须是最左下角，最小元素。&#xA;题解 Link to heading C++ Link to heading 递归&#xA;class Solution { public: TreeNode *prev = nullptr; int Min = INT_MAX; void traversal(TreeNode* root) { if(root == nullptr) return; traversal(root-&amp;gt;left); if(prev!=nullptr &amp;amp;&amp;amp; abs(root-&amp;gt;val - prev-&amp;gt;val) &amp;lt; Min){ Min = abs(root-&amp;gt;val - prev-&amp;gt;val); } prev = root; traversal(root-&amp;gt;right); return; } int getMinimumDifference(TreeNode * root){ traversal(root); return Min; } }; 迭代：</description>
    </item>
    <item>
      <title>2024-05-27刷题</title>
      <link>http://localhost:1313/posts/leetcode17/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/leetcode17/</guid>
      <description>2024-05-27刷题 Link to heading 654.最大二叉树 Link to heading 11:05&#xA;思路 Link to heading 只需要一个数组，以及开始结束索引。&#xA;终止条件 当，左索引大于右索引的时候终止。 操作逻辑 创建一个根节点，其值为 nums 中的最大值。 递归地在最大值 左边 的 子数组前缀上 构建左子树。 递归地在最大值 右边 的 子数组后缀上 构建右子树。 创建左右子树 root-&amp;gt;left = traversal(nums,start,max_index); root-&amp;gt;right = traversal(nums,max_index+1,end); return root; 注意⚠️ Link to heading int max_index = start; for(int i = start + 1 ; i &amp;lt; end ; i++){ if(nums[i] &amp;gt; nums[max_index]) max_index = i; } 题解 Link to heading C++ Link to heading /** * Definition for a binary tree node.</description>
    </item>
    <item>
      <title>二叉树遍历总结</title>
      <link>http://localhost:1313/posts/summary1/</link>
      <pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/summary1/</guid>
      <description>二叉树遍历总结 Link to heading 2024-05-23 回忆：今天学习了二叉树的四种遍历方式，先序遍历，中序遍历，后序遍历，层序遍历。分别使用递归以及迭代的方法实现了这四种遍历方式。&#xA;递归实现三种遍历 Link to heading 前中后三种遍历方式，分别代表访问节点的顺序所以，只要更改访问顺序即可实现。&#xA;传递当前节点，以及结果数组 当前节点为nullptr的时候返回 if(cur == nullptr) return; 然后下面三句的顺序，代表中左右，遍历，同理，当中序遍历和后序遍历的时候，更改这几行的顺序即可 //先序遍历 result.push_back(cur-&amp;gt;val); traversal(cur-&amp;gt;left,result); traversal(cur-&amp;gt;right,result); //中序遍历 traversal(cur-&amp;gt;left,vec); //遍历左 vec.push_back(cur-&amp;gt;val); //取 traversal(cur-&amp;gt;right,vec); //遍历右 //后序遍历 traversal(cur-&amp;gt;left,vec); //遍历左 traversal(cur-&amp;gt;right,vec); //遍历右 vec.push_back(cur-&amp;gt;val); //取 完整代码&#xA;/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public: void traversal(TreeNode *cur , vector&amp;lt;int&amp;gt; &amp;amp;result){ if(cur == nullptr) return; //先序遍历 result.</description>
    </item>
  </channel>
</rss>
