<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数组 on WOTMCCR&#39;S BLOG</title>
    <link>http://localhost:1313/tags/%E6%95%B0%E7%BB%84/</link>
    <description>Recent content in 数组 on WOTMCCR&#39;S BLOG</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E6%95%B0%E7%BB%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024-05-10刷题</title>
      <link>http://localhost:1313/posts/%E5%88%B7%E9%A2%98/</link>
      <pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%88%B7%E9%A2%98/</guid>
      <description>2024-05-10刷题 Link to heading 704.二分查找 Link to heading 思路 Link to heading 使用左闭右闭 如果中间的元素小于目标元素，则说明，需要找的元素在右边的区间，并可将mid位置的元素排除 然后将right指针移动到当前mid+1所在的位置。 如果相等则返回&#xA;时间复杂度 Link to heading 由于每次查找都会将查找范围缩小一半，因此二分查找的时间复杂度是 $O(\log n)$，其中 n 是数组的长度。&#xA;注意⚠️ Link to heading nums.size() 返回是vector的长度值，而不是最后一个元素的下标。 应该为l&amp;lt;=r 可以防止只有一个元素的时，判断不进行 可以防止目标元素在开始与结尾的时候，判断不进行 计算mid 可以使用 int mid = (r - l)/2 + l 可以防止长度太大溢出 更新l和r的时候可以排除mid位置的元素 题解 Link to heading C++ Link to heading class Solution { public: int search(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { int l = 0; int r = nums.</description>
    </item>
    <item>
      <title>2024-05-10刷题2</title>
      <link>http://localhost:1313/posts/leetcode2/</link>
      <pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/leetcode2/</guid>
      <description>2024-05-10 刷题 Link to heading 977.有序数组的平方 Link to heading 1h20min&#xA;思路 Link to heading 我原本想在一个数组上进行处理，但发现不行。 所以，新建一个数组，然后在原数组上从左右开始向中间遍历，如果大的就添加到新的数组中，并更新新数组的下标&#xA;复杂度 Link to heading 时间复杂度：O(n) 。n 的长度为数组的长度。 空间复杂度：O(1)。除了存储答案的数组以外，我们只需要维护常量空间。&#xA;题解 Link to heading C++ Link to heading class Solution { public: vector&amp;lt;int&amp;gt; sortedSquares(vector&amp;lt;int&amp;gt;&amp;amp; nums) { vector &amp;lt;int&amp;gt; sorted(nums.size(),0); int l = 0; int r = nums.size() - 1; int k = r; while(l&amp;lt;=r){ if(nums[r]*nums[r] &amp;gt; nums[l]*nums[l]){ sorted[k--] = nums[r] * nums[r]; r--; }else{ sorted[k--] = nums[l] * nums[l]; l++; } } return sorted; } }; java Link to heading class Solution { public int[] sortedSquares(int[] nums) { int n = nums.</description>
    </item>
  </channel>
</rss>
