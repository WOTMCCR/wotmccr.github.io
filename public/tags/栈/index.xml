<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>栈 on WOTMCCR&#39;S BLOG</title>
    <link>http://localhost:1313/tags/%E6%A0%88/</link>
    <description>Recent content in 栈 on WOTMCCR&#39;S BLOG</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 19 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E6%A0%88/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024-05-19刷题</title>
      <link>http://localhost:1313/posts/leetcode10/</link>
      <pubDate>Sun, 19 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/leetcode10/</guid>
      <description>2024-05-19刷题 Link to heading 20. 有效的括号 Link to heading 19:01&#xA;思路 Link to heading 因为这道题， s 仅由括号 &#39;()[]{}&#39; 组成而没有交错的情况，所以只需要判断栈顶的元素与当前元素是否匹配即可&#xA;题解 Link to heading C++ Link to heading class Solution { public: bool isValid(string s) { //如果数组大小为奇数则一定不满足 if(s.length() % 2 != 0) return false; stack&amp;lt;int&amp;gt; in; //将s入栈，可以直接，将左括号输入成对应的右括号，然后当右括号到达的时候进行出栈判断进行匹配即可 for(int i = 0 ; i &amp;lt; s.length() ; i++){ if(s[i] == &amp;#39;(&amp;#39;) in.push(&amp;#39;)&amp;#39;); else if(s[i] == &amp;#39;{&amp;#39;) in.push(&amp;#39;}&amp;#39;); else if(s[i] == &amp;#39;[&amp;#39;) in.</description>
    </item>
    <item>
      <title>2024-05-17刷题</title>
      <link>http://localhost:1313/posts/leetcode9/</link>
      <pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/leetcode9/</guid>
      <description>2024-05-17 Link to heading 使用栈模拟队列 Link to heading 16:49&#xA;思路 Link to heading 使用两个栈，stkIN，stkOut 当入队列的时候，先入In栈 当出队列的时候，将in栈的所有元素都移到out栈中，然后，out栈pop&#xA;题解 Link to heading C++ Link to heading class MyQueue { public: stack&amp;lt;int&amp;gt; stIn; stack&amp;lt;int&amp;gt; stOut; MyQueue() { } void push(int x) { stIn.push(x); } int pop() { if(stOut.empty()){ while(!stIn.empty()){ stOut.push(stIn.top()); stIn.pop(); } } int result = stOut.top(); stOut.pop(); return result; } int peek() { int res = this-&amp;gt;pop(); stOut.push(res); return res; } bool empty() { return stIn.</description>
    </item>
  </channel>
</rss>
